/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

import axios from "axios";

import { useRecoilState } from "recoil";
import { basicChats } from "../../../atoms";
import iot from "../../../apis/iot";

function Star({ chat, ...props }) {
  const [position, sposition] = useState({});
  useEffect(() => {
    const setPosition = () => {
      const minx = -15;
      const maxx = 15;
      const miny = -3;
      const maxy = 4;
      const minz = -5;
      const maxz = 3;

      const x = Math.floor(Math.random() * (maxx - minx) + minx);
      const y = Math.floor(Math.random() * (maxy - miny) + miny);
      const z = Math.floor(Math.random() * (maxz - minz) + minz);
      sposition({ x, y, z });
    };
    setPosition();
  }, []);
  const [chats, setChats] = useRecoilState(basicChats);
  const group = useRef();
  useFrame(({ clock }) => {
    if (chat.isUsed !== true) {
      const a = clock.getElapsedTime();
      group.current.rotation.y = a;
    }
  });

  const { nodes, materials } = useGLTF("/models/Star.gltf");

  const onClick = (id, c) => {
    console.log(c);
    axios.get(iot.tts(c)).then((res) => {
      console.log(res.data);
    });
    const newChat = chats.map((data) => {
      if (data.answerID === id) {
        return {
          ...data,
          isUsed: true,
        };
      } else {
        return data;
      }
    });
    setChats(newChat);
  };
  return (
    <>
      {chat.isUsed ? null : (
        <group
          ref={group}
          {...props}
          dispose={null}
          position={[position.x, position.y, position.z]}
          onClick={() => onClick(chat.answerID, chat.content)}
        >
          <mesh geometry={nodes.Star.geometry} material={materials.Gold} />
        </group>
      )}
    </>
  );
}

useGLTF.preload("/models/Star.gltf");

export default React.memo(Star);
