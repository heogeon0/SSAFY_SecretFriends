/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import webapi from "../../../apis/webapi";
import iot from "../../../apis/iot";
import axios from "axios";
import { useRecoilState } from "recoil";
import { childrenId, death, no, yes, wave, childrenName } from "../../../atoms";
import { useNavigate } from "react-router-dom";

const loginCon = (rn, id) => {
  const chats = {
    0: `안녕 ${id}아. 나랑 놀고 싶다면 나를 눌러봐!  `,
    1: `${id} 아 안녕!!  나를 눌러서 대화를 시작해보지 않을래?`,
    2: `${id} 아 또왔구나  정말 보고 싶었어!  나랑 또 재밌게  놀아보자!`,
  };
  if (rn == 0) return chats[0];
  else if (rn == 1) return chats[1];
  else return chats[2];
};

export default function Character({ ...props }) {
  const group = useRef();

  const { nodes, materials, animations } = useGLTF("/models/Character.gltf");
  const { actions } = useAnimations(animations, group);
  const [hello, sethello] = useState(false);
  const [sayHi, setSayHi] = useState(false);
  const [id, setId] = useRecoilState(childrenId);
  const [myName, setMyName] = useRecoilState(childrenName);

  const [deathm, setDeath] = useRecoilState(death);
  const [nom, setNo] = useRecoilState(no);
  const [yesm, setYes] = useRecoilState(yes);
  const [wavem, setWave] = useRecoilState(wave);

  function sleep(sec) {
    return new Promise((resolve) => setTimeout(resolve, sec * 1000));
  }
  // actions
  const mounted = useRef(false);
  useEffect(() => {
    if (props.state === "stateMain") {
      return;
    }

    if (props.state === "stateLogin") {
      axios.get(iot.arduino()).then((res) => {
        axios.get(iot.login()).then(({ data }) => {
          axios.get(webapi.answers.info(data.id)).then(async (info) => {
            console.log(info.data);
            const childrenData = {
              birthDay: `${info.data.birthDay}/${info.data.birthDay}`,
              name: `${info.data.name}`,
              nickname: info.data.nickname,
              count: info.data.count,
            };
            setMyName(childrenData);
            props.setReady((val) => !val);
            setId(data.id);
            sethello(true);
            await sleep(1);

            const rn = Math.floor(Math.random() * 3);
            axios.get(iot.tts(loginCon(rn, info.data.nickname)));
          });
        });
      });
    }
  }, []);
  useFrame(({ clock }) => {
    if (props.ready) {
      const elapsedTime = clock.getElapsedTime();
      if (group.current.position.x > 2.1) {
        group.current.position.x = group.current.position.x - 0.02;
        group.current.position.y = group.current.position.y + 0.01;
      }
      // console.log(group.current);
    }
  });

  function onClick() {
    if (props.state === "stateLogin" && id) {
      props.goMain();
    } else if (props.state === "stateMain") {
      axios
        .get(
          iot.tts(
            "나 말고 별과 하트를 눌러봐. 내 친구들이 너한테 해주고 싶은 말이 있대!"
          )
        )
        .then((res) => {
          setDeath(true);
        });
    }

    sethello((val) => !val);
  }
  function delay(time) {
    return new Promise((resolve) => setTimeout(resolve, time));
  }

  useEffect(() => {
    console.log(actions);
    actions?.Yes?.play();
    return () => {
      actions?.Wave?.play();
    };
  }, [hello]);

  useEffect(() => {
    if (!mounted.current) {
      mounted.current = true;
    } else {
      actions.Yes.stop();
      actions?.Death?.play();
      sleep(1);
      actions?.Death?.stop();
    }
  }, [deathm]);
  // useEffect(() => {
  //   if (!mounted.current) {
  //     mounted.current = true;
  //   } else {
  //     actions.No.play();
  //   }
  // }, [nom]);

  return (
    <group ref={group} {...props} dispose={null} onClick={onClick} scale={1}>
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Root} />
          <group name="Arms">
            <skinnedMesh
              name="CUBezierCurve000"
              geometry={nodes.CUBezierCurve000.geometry}
              material={materials.Main}
              skeleton={nodes.CUBezierCurve000.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve000_1"
              geometry={nodes.CUBezierCurve000_1.geometry}
              material={materials.Main_Light}
              skeleton={nodes.CUBezierCurve000_1.skeleton}
            />
          </group>
          <group name="Body_1">
            <skinnedMesh
              name="CUBezierCurve002"
              geometry={nodes.CUBezierCurve002.geometry}
              material={materials.Main}
              skeleton={nodes.CUBezierCurve002.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve002_1"
              geometry={nodes.CUBezierCurve002_1.geometry}
              material={materials.Main_Light}
              skeleton={nodes.CUBezierCurve002_1.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve002_2"
              geometry={nodes.CUBezierCurve002_2.geometry}
              material={materials.Main2}
              skeleton={nodes.CUBezierCurve002_2.skeleton}
            />
          </group>
          <skinnedMesh
            name="Ears"
            geometry={nodes.Ears.geometry}
            material={materials.Main}
            skeleton={nodes.Ears.skeleton}
          />
          <group name="Head_1">
            <skinnedMesh
              name="CUBezierCurve003"
              geometry={nodes.CUBezierCurve003.geometry}
              material={materials.Main}
              skeleton={nodes.CUBezierCurve003.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve003_1"
              geometry={nodes.CUBezierCurve003_1.geometry}
              material={materials.Black}
              skeleton={nodes.CUBezierCurve003_1.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve003_2"
              geometry={nodes.CUBezierCurve003_2.geometry}
              material={materials.Main_Light}
              skeleton={nodes.CUBezierCurve003_2.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve003_3"
              geometry={nodes.CUBezierCurve003_3.geometry}
              material={materials.White}
              skeleton={nodes.CUBezierCurve003_3.skeleton}
            />
            <skinnedMesh
              name="CUBezierCurve003_4"
              geometry={nodes.CUBezierCurve003_4.geometry}
              material={materials.EyeColor}
              skeleton={nodes.CUBezierCurve003_4.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Character.gltf");
